<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k8s on Be Brave</title>
    <link>https://FlomeWorld.github.io/tags/k8s/</link>
    <description>Recent content in k8s on Be Brave</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://FlomeWorld.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Garbage Collection</title>
      <link>https://FlomeWorld.github.io/post/k8s/gc/garbage-collection/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://FlomeWorld.github.io/post/k8s/gc/garbage-collection/</guid>
      <description>Garbage Collection instruction: https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/
mindmap e.g I use the steps bellow to explation principle of gc
1. create the deployment apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 2. delete the rs  prepare : I stop the kubelet so the pod belong to rs will be not deleted delete the resource with the propagationPloicy equel to &amp;lsquo;Foreground&amp;rsquo;  curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/deployments/nginx-deployment -d &amp;#39;{&amp;#34;kind&amp;#34;:&amp;#34;DeleteOptions&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;,&amp;#34;propagationPolicy&amp;#34;:&amp;#34;Orphan&amp;#34;}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34;  the result:  (base) frankie@frankie-XPS-15-9550:~/Documents/test$kubectl get pod NAME READY STATUS RESTARTS AGE nginx-deployment-57d9684bf8-bnx88 1/1 Running 0 35m nginx-deployment-57d9684bf8-nxnr6 1/1 Running 0 35m nginx-deployment-57d9684bf8-q4zj2 1/1 Running 0 35m (base) frankie@frankie-XPS-15-9550:~/Documents/test$ kubectl get rs NAME DESIRED CURRENT READY AGE nginx-deployment-57d9684bf8 3 3 3 2m40s (base) frankie@frankie-XPS-15-9550:~/Documents/test$ kubectl get deploy No resources found.</description>
    </item>
    
    <item>
      <title>Scheduler</title>
      <link>https://FlomeWorld.github.io/post/k8s/scheduler/scheduler/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://FlomeWorld.github.io/post/k8s/scheduler/scheduler/</guid>
      <description>kubernetes 调度器
调度器作为一个独立运行的master节点组件，通过与API server交互来获取新创建的pod资源和每个node信息的变化，以此来为新的pod选择一个最优秀的节点进行部署。
代码结构 代码框架可以分为三层:初始化配置，架构，算法
初始化配置 程序入口
 cmd/kube-scheduler/scheduler.go为程序的入口，和其他组件一样依赖&amp;quot;github.com/spf13/pflag&amp;quot;来实现参数的配置和程序的执行  核心代码：
// Run executes the scheduler based on the given configuration. It only returns on error or when context is done. func Run(ctx context.Context, cc schedulerserverconfig.CompletedConfig, outOfTreeRegistryOptions ...Option) error { ...... // 外部插件注册  outOfTreeRegistry := make(framework.Registry) for _, option := range outOfTreeRegistryOptions { if err := option(outOfTreeRegistry); err != nil { return err } } ...... // 创建scheduler实例  sched, err := scheduler.</description>
    </item>
    
  </channel>
</rss>